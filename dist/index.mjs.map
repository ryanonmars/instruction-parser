{"version":3,"sources":["../src/index.ts","../src/lib/instruction-parser.ts","../src/idl/jupiter.ts","../src/lib/utils.ts","../src/lib/get-events.ts","../src/constants.ts"],"sourcesContent":["import { BN, Event, Program, Provider } from \"@coral-xyz/anchor\";\nimport { unpackAccount, unpackMint } from \"@solana/spl-token\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport Decimal from \"decimal.js\";\nimport { InstructionParser } from \"./lib/instruction-parser\";\nimport { DecimalUtil, getPriceInUSDByMint } from \"./lib/utils\";\nimport { getEvents } from \"./lib/get-events\";\nimport { AMM_TYPES, JUPITER_V6_PROGRAM_ID } from \"./constants\";\nimport { FeeEvent, SwapEvent, TransactionWithMeta } from \"./types\";\nimport { IDL, Jupiter } from \"./idl/jupiter\";\n\nexport { TransactionWithMeta };\n\nexport const program = new Program<Jupiter>(\n  IDL,\n  JUPITER_V6_PROGRAM_ID,\n  {} as Provider\n);\n\ntype AccountInfoMap = Map<string, AccountInfo<Buffer>>;\n\nexport type SwapAttributes = {\n  owner: string;\n  transferAuthority: string;\n  programId: string;\n  signature: string;\n  timestamp: Date;\n  legCount: number;\n  volumeInUSD: number;\n  inSymbol: string;\n  inAmount: BigInt;\n  inAmountInDecimal?: number;\n  inAmountInUSD: number;\n  inMint: string;\n  outSymbol: string;\n  outAmount: BigInt;\n  outAmountInDecimal?: number;\n  outAmountInUSD: number;\n  outMint: string;\n  instruction: string;\n  exactInAmount: BigInt;\n  exactInAmountInUSD: number;\n  exactOutAmount: BigInt;\n  exactOutAmountInUSD: number;\n  swapData: JSON;\n  feeTokenPubkey?: string;\n  feeOwner?: string;\n  feeSymbol?: string;\n  feeAmount?: BigInt;\n  feeAmountInDecimal?: number;\n  feeAmountInUSD?: number;\n  feeMint?: string;\n  tokenLedger?: string;\n  lastAccount: string; // This can be a tracking account since we don't have a way to know we just log it the last account.\n};\n\nconst reduceEventData = <T>(events: Event[], name: string) =>\n  events.reduce((acc, event) => {\n    if (event.name === name) {\n      acc.push(event.data as T);\n    }\n    return acc;\n  }, new Array<T>());\n\nexport async function extract(\n  signature: string,\n  connection: Connection,\n  tx: TransactionWithMeta,\n  blockTime?: number\n): Promise<SwapAttributes | undefined> {\n  const programId = JUPITER_V6_PROGRAM_ID;\n  const accountInfosMap: AccountInfoMap = new Map();\n\n  const logMessages = tx.meta.logMessages;\n  if (!logMessages) {\n    throw new Error(\"Missing log messages...\");\n  }\n\n  const parser = new InstructionParser(programId);\n  const events = getEvents(program, tx);\n\n  const swapEvents = reduceEventData<SwapEvent>(events, \"SwapEvent\");\n  const feeEvent = reduceEventData<FeeEvent>(events, \"FeeEvent\")[0];\n\n  if (swapEvents.length === 0) {\n    // Not a swap event, for example: https://solscan.io/tx/5ZSozCHmAFmANaqyjRj614zxQY8HDXKyfAs2aAVjZaadS4DbDwVq8cTbxmM5m5VzDcfhysTSqZgKGV1j2A2Hqz1V\n    return;\n  }\n\n  const accountsToBeFetched = new Array<PublicKey>();\n  swapEvents.forEach((swapEvent) => {\n    accountsToBeFetched.push(swapEvent.inputMint);\n    accountsToBeFetched.push(swapEvent.outputMint);\n  });\n\n  if (feeEvent) {\n    accountsToBeFetched.push(feeEvent.account);\n  }\n  const accountInfos = await connection.getMultipleAccountsInfo(\n    accountsToBeFetched\n  );\n  accountsToBeFetched.forEach((account, index) => {\n    accountInfosMap.set(account.toBase58(), accountInfos[index]);\n  });\n\n  const swapData = await parseSwapEvents(accountInfosMap, swapEvents);\n  const instructions = parser.getInstructions(tx);\n  const [initialPositions, finalPositions] =\n    parser.getInitialAndFinalSwapPositions(instructions);\n\n  const inSymbol = null; // We don't longer support this.\n  const inMint = swapData[initialPositions[0]].inMint;\n  const inSwapData = swapData.filter(\n    (swap, index) => initialPositions.includes(index) && swap.inMint === inMint\n  );\n  const inAmount = inSwapData.reduce((acc, curr) => {\n    return acc + BigInt(curr.inAmount);\n  }, BigInt(0));\n  const inAmountInDecimal = inSwapData.reduce((acc, curr) => {\n    return acc.add(curr.inAmountInDecimal ?? 0);\n  }, new Decimal(0));\n  const inAmountInUSD = inSwapData.reduce((acc, curr) => {\n    return acc.add(curr.inAmountInUSD ?? 0);\n  }, new Decimal(0));\n\n  const outSymbol = null; // We don't longer support this.\n  const outMint = swapData[finalPositions[0]].outMint;\n  const outSwapData = swapData.filter(\n    (swap, index) => finalPositions.includes(index) && swap.outMint === outMint\n  );\n  const outAmount = outSwapData.reduce((acc, curr) => {\n    return acc + BigInt(curr.outAmount);\n  }, BigInt(0));\n  const outAmountInDecimal = outSwapData.reduce((acc, curr) => {\n    return acc.add(curr.outAmountInDecimal ?? 0);\n  }, new Decimal(0));\n  const outAmountInUSD = outSwapData.reduce((acc, curr) => {\n    return acc.add(curr.outAmountInUSD ?? 0);\n  }, new Decimal(0));\n\n  const volumeInUSD =\n    outAmountInUSD && inAmountInUSD\n      ? Decimal.min(outAmountInUSD, inAmountInUSD)\n      : outAmountInUSD ?? inAmountInUSD;\n\n  const swap = {} as SwapAttributes;\n\n  const [instructionName, transferAuthority, lastAccount] =\n    parser.getInstructionNameAndTransferAuthorityAndLastAccount(instructions);\n\n  swap.transferAuthority = transferAuthority;\n  swap.lastAccount = lastAccount;\n  swap.instruction = instructionName;\n  swap.owner = tx.transaction.message.accountKeys[0].pubkey.toBase58();\n  swap.programId = programId.toBase58();\n  swap.signature = signature;\n  swap.timestamp = new Date(new Date((blockTime ?? 0) * 1000).toISOString());\n  swap.legCount = swapEvents.length;\n  swap.volumeInUSD = volumeInUSD.toNumber();\n\n  swap.inSymbol = inSymbol;\n  swap.inAmount = inAmount;\n  swap.inAmountInDecimal = inAmountInDecimal.toNumber();\n  swap.inAmountInUSD = inAmountInUSD.toNumber();\n  swap.inMint = inMint;\n\n  swap.outSymbol = outSymbol;\n  swap.outAmount = outAmount;\n  swap.outAmountInDecimal = outAmountInDecimal.toNumber();\n  swap.outAmountInUSD = outAmountInUSD.toNumber();\n  swap.outMint = outMint;\n\n  const exactOutAmount = parser.getExactOutAmount(\n    tx.transaction.message.instructions\n  );\n  if (exactOutAmount) {\n    swap.exactOutAmount = BigInt(exactOutAmount);\n\n    if (outAmountInUSD) {\n      swap.exactOutAmountInUSD = new Decimal(exactOutAmount)\n        .div(outAmount.toString())\n        .mul(outAmountInUSD)\n        .toNumber();\n    }\n  }\n\n  const exactInAmount = parser.getExactInAmount(\n    tx.transaction.message.instructions\n  );\n  if (exactInAmount) {\n    swap.exactInAmount = BigInt(exactInAmount);\n\n    if (inAmountInUSD) {\n      swap.exactInAmountInUSD = new Decimal(exactInAmount)\n        .div(inAmount.toString())\n        .mul(inAmountInUSD)\n        .toNumber();\n    }\n  }\n\n  swap.swapData = JSON.parse(JSON.stringify(swapData));\n\n  if (feeEvent) {\n    const { mint, amount, amountInDecimal, amountInUSD } = await extractVolume(\n      accountInfosMap,\n      feeEvent.mint,\n      feeEvent.amount\n    );\n    swap.feeTokenPubkey = feeEvent.account.toBase58();\n    swap.feeOwner = extractTokenAccountOwner(\n      accountInfosMap,\n      feeEvent.account\n    )?.toBase58();\n    swap.feeAmount = BigInt(amount);\n    swap.feeAmountInDecimal = amountInDecimal?.toNumber();\n    swap.feeAmountInUSD = amountInUSD?.toNumber();\n    swap.feeMint = mint;\n  }\n\n  return swap;\n}\n\nasync function parseSwapEvents(\n  accountInfosMap: AccountInfoMap,\n  swapEvents: SwapEvent[]\n) {\n  const swapData = await Promise.all(\n    swapEvents.map((swapEvent) => extractSwapData(accountInfosMap, swapEvent))\n  );\n\n  return swapData;\n}\n\nasync function extractSwapData(\n  accountInfosMap: AccountInfoMap,\n  swapEvent: SwapEvent\n) {\n  const amm =\n    AMM_TYPES[swapEvent.amm.toBase58()] ??\n    `Unknown program ${swapEvent.amm.toBase58()}`;\n\n  const {\n    mint: inMint,\n    amount: inAmount,\n    amountInDecimal: inAmountInDecimal,\n    amountInUSD: inAmountInUSD,\n  } = await extractVolume(\n    accountInfosMap,\n    swapEvent.inputMint,\n    swapEvent.inputAmount\n  );\n  const {\n    mint: outMint,\n    amount: outAmount,\n    amountInDecimal: outAmountInDecimal,\n    amountInUSD: outAmountInUSD,\n  } = await extractVolume(\n    accountInfosMap,\n    swapEvent.outputMint,\n    swapEvent.outputAmount\n  );\n\n  return {\n    amm,\n    inMint,\n    inAmount,\n    inAmountInDecimal,\n    inAmountInUSD,\n    outMint,\n    outAmount,\n    outAmountInDecimal,\n    outAmountInUSD,\n  };\n}\n\nasync function extractVolume(\n  accountInfosMap: AccountInfoMap,\n  mint: PublicKey,\n  amount: BN\n) {\n  const tokenPriceInUSD = await getPriceInUSDByMint(mint.toBase58());\n  const tokenDecimals = extractMintDecimals(accountInfosMap, mint);\n  const amountInDecimal = DecimalUtil.fromBN(amount, tokenDecimals);\n  const amountInUSD = tokenPriceInUSD\n    ? amountInDecimal.mul(tokenPriceInUSD)\n    : undefined;\n\n  return {\n    mint: mint.toBase58(),\n    amount: amount.toString(),\n    amountInDecimal,\n    amountInUSD,\n  };\n}\n\nfunction extractTokenAccountOwner(\n  accountInfosMap: AccountInfoMap,\n  account: PublicKey\n) {\n  const accountData = accountInfosMap.get(account.toBase58());\n\n  if (accountData) {\n    const accountInfo = unpackAccount(account, accountData, accountData.owner);\n    return accountInfo.owner;\n  }\n\n  return;\n}\n\nfunction extractMintDecimals(accountInfosMap: AccountInfoMap, mint: PublicKey) {\n  const mintData = accountInfosMap.get(mint.toBase58());\n\n  if (mintData) {\n    const mintInfo = unpackMint(mint, mintData, mintData.owner);\n    return mintInfo.decimals;\n  }\n\n  return;\n}\n\nexport { DecimalUtil, getPriceInUSDByMint } from \"./lib/utils\";\nexport { getTokenMap } from \"./lib/utils\";\n","import { ParsedInstruction, PublicKey } from \"@solana/web3.js\";\nimport { BorshCoder, Program } from \"@coral-xyz/anchor\";\nimport { IDL } from \"../idl/jupiter\";\nimport { PartialInstruction, RoutePlan, TransactionWithMeta } from \"../types\";\n\nexport class InstructionParser {\n  private coder: BorshCoder;\n  private programId: PublicKey;\n\n  constructor(programId: PublicKey) {\n    this.programId = programId;\n    this.coder = new BorshCoder(IDL);\n  }\n\n  getInstructionNameAndTransferAuthorityAndLastAccount(\n    instructions: PartialInstruction[]\n  ) {\n    for (const instruction of instructions) {\n      if (!instruction.programId.equals(this.programId)) {\n        continue;\n      }\n\n      const ix = this.coder.instruction.decode(instruction.data, \"base58\");\n\n      if (this.isRouting(ix.name)) {\n        const instructionName = ix.name;\n        const transferAuthority =\n          instruction.accounts[\n            this.getTransferAuthorityIndex(instructionName)\n          ].toString();\n        const lastAccount =\n          instruction.accounts[instruction.accounts.length - 1].toString();\n\n        return [ix.name, transferAuthority, lastAccount];\n      }\n    }\n\n    return [];\n  }\n\n  getTransferAuthorityIndex(instructionName: string) {\n    switch (instructionName) {\n      case \"route\":\n      case \"exactOutRoute\":\n      case \"routeWithTokenLedger\":\n        return 1;\n      case \"sharedAccountsRoute\":\n      case \"sharedAccountsRouteWithTokenLedger\":\n      case \"sharedAccountsExactOutRoute\":\n        return 2;\n    }\n  }\n\n  // For CPI, we have to also check for innerInstructions.\n  getInstructions(tx: TransactionWithMeta): PartialInstruction[] {\n    const parsedInstructions: PartialInstruction[] = [];\n    for (const instruction of tx.transaction.message.instructions) {\n      if (instruction.programId.equals(this.programId)) {\n        parsedInstructions.push(instruction as any);\n      }\n    }\n\n    for (const instructions of tx.meta.innerInstructions) {\n      for (const instruction of instructions.instructions) {\n        if (instruction.programId.equals(this.programId)) {\n          parsedInstructions.push(instruction as any);\n        }\n      }\n    }\n\n    return parsedInstructions;\n  }\n\n  // Extract the position of the initial and final swap from the swap array.\n  getInitialAndFinalSwapPositions(instructions: PartialInstruction[]) {\n    for (const instruction of instructions) {\n      if (!instruction.programId.equals(this.programId)) {\n        continue;\n      }\n\n      const ix = this.coder.instruction.decode(instruction.data, \"base58\");\n      // This will happen because now event is also an CPI instruction.\n      if (!ix) {\n        continue;\n      }\n\n      if (this.isRouting(ix.name)) {\n        const routePlan = (ix.data as any).routePlan as RoutePlan;\n        const inputIndex = 0;\n        const outputIndex = routePlan.length;\n\n        const initialPositions: number[] = [];\n        for (let j = 0; j < routePlan.length; j++) {\n          if (routePlan[j].inputIndex === inputIndex) {\n            initialPositions.push(j);\n          }\n        }\n\n        const finalPositions: number[] = [];\n        for (let j = 0; j < routePlan.length; j++) {\n          if (routePlan[j].outputIndex === outputIndex) {\n            finalPositions.push(j);\n          }\n        }\n\n        if (\n          finalPositions.length === 0 &&\n          this.isCircular((ix.data as any).routePlan)\n        ) {\n          for (let j = 0; j < (ix.data as any).routePlan.length; j++) {\n            if ((ix.data as any).routePlan[j].outputIndex === 0) {\n              finalPositions.push(j);\n            }\n          }\n        }\n\n        return [initialPositions, finalPositions];\n      }\n    }\n  }\n\n  getExactOutAmount(instructions: (ParsedInstruction | PartialInstruction)[]) {\n    for (const instruction of instructions) {\n      if (!instruction.programId.equals(this.programId)) {\n        continue;\n      }\n      if (!(\"data\" in instruction)) continue; // Guard in case it is a parsed decoded instruction, should be impossible\n\n      const ix = this.coder.instruction.decode(instruction.data, \"base58\");\n\n      if (this.isExactIn(ix.name)) {\n        return (ix.data as any).quotedOutAmount.toString();\n      }\n    }\n\n    return;\n  }\n\n  getExactInAmount(instructions: (ParsedInstruction | PartialInstruction)[]) {\n    for (const instruction of instructions) {\n      if (!instruction.programId.equals(this.programId)) {\n        continue;\n      }\n      if (!(\"data\" in instruction)) continue; // Guard in case it is a parsed decoded instruction, should be impossible\n\n      const ix = this.coder.instruction.decode(instruction.data, \"base58\");\n\n      if (this.isExactOut(ix.name)) {\n        return (ix.data as any).quotedInAmount.toString();\n      }\n    }\n\n    return;\n  }\n\n  isExactIn(name: string) {\n    return (\n      name === \"route\" ||\n      name === \"routeWithTokenLedger\" ||\n      name === \"sharedAccountsRoute\" ||\n      name === \"sharedAccountsRouteWithTokenLedger\"\n    );\n  }\n\n  isExactOut(name: string) {\n    return name === \"sharedAccountsExactOutRoute\" || name === \"exactOutRoute\";\n  }\n\n  isRouting(name: string) {\n    return (\n      name === \"route\" ||\n      name === \"routeWithTokenLedger\" ||\n      name === \"sharedAccountsRoute\" ||\n      name === \"sharedAccountsRouteWithTokenLedger\" ||\n      name === \"sharedAccountsExactOutRoute\" ||\n      name === \"exactOutRoute\"\n    );\n  }\n\n  isCircular(routePlan: RoutePlan) {\n    if (!routePlan || routePlan.length === 0) {\n      return false; // Empty or null array is not circular\n    }\n\n    const indexMap = new Map(\n      routePlan.map((obj) => [obj.inputIndex, obj.outputIndex])\n    );\n    let visited = new Set();\n    let currentIndex = routePlan[0].inputIndex; // Start from the first object's inputIndex\n\n    while (true) {\n      if (visited.has(currentIndex)) {\n        return currentIndex === routePlan[0].inputIndex;\n      }\n\n      visited.add(currentIndex);\n\n      if (!indexMap.has(currentIndex)) {\n        return false; // No further mapping, not circular\n      }\n\n      currentIndex = indexMap.get(currentIndex);\n    }\n  }\n}\n","export type Jupiter = {\n  version: \"0.1.0\";\n  name: \"jupiter\";\n  instructions: [\n    {\n      name: \"route\";\n      docs: [\"route_plan Topologically sorted trade DAG\"];\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"userSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        }\n      ];\n      args: [\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"inAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"quotedOutAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"routeWithTokenLedger\";\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"userSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"tokenLedger\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"quotedOutAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"sharedAccountsRoute\";\n      docs: [\n        \"Route by using program owned token accounts and open orders accounts.\"\n      ];\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"sourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sourceMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"token2022Program\";\n          isMut: false;\n          isSigner: false;\n          isOptional: true;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        },\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"inAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"quotedOutAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"sharedAccountsRouteWithTokenLedger\";\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"sourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sourceMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"token2022Program\";\n          isMut: false;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"tokenLedger\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        },\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"quotedOutAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"exactOutRoute\";\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"userSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"sourceMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"token2022Program\";\n          isMut: false;\n          isSigner: false;\n          isOptional: true;\n        }\n      ];\n      args: [\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"outAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"quotedInAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"sharedAccountsExactOutRoute\";\n      docs: [\n        \"Route by using program owned token accounts and open orders accounts.\"\n      ];\n      accounts: [\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userTransferAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"sourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programSourceTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programDestinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sourceMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"destinationMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"platformFeeAccount\";\n          isMut: true;\n          isSigner: false;\n          isOptional: true;\n        },\n        {\n          name: \"token2022Program\";\n          isMut: false;\n          isSigner: false;\n          isOptional: true;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        },\n        {\n          name: \"routePlan\";\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\";\n            };\n          };\n        },\n        {\n          name: \"outAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"quotedInAmount\";\n          type: \"u64\";\n        },\n        {\n          name: \"slippageBps\";\n          type: \"u16\";\n        },\n        {\n          name: \"platformFeeBps\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"setTokenLedger\";\n      accounts: [\n        {\n          name: \"tokenLedger\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenAccount\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"createOpenOrders\";\n      accounts: [\n        {\n          name: \"openOrders\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"dexProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"market\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"createTokenAccount\";\n      accounts: [\n        {\n          name: \"tokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"bump\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"createProgramOpenOrders\";\n      accounts: [\n        {\n          name: \"openOrders\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"dexProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"market\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"claim\";\n      accounts: [\n        {\n          name: \"wallet\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"claimToken\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"wallet\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"programAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"programTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"id\";\n          type: \"u8\";\n        }\n      ];\n      returns: \"u64\";\n    },\n    {\n      name: \"createTokenLedger\";\n      accounts: [\n        {\n          name: \"tokenLedger\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"TokenLedger\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"tokenAccount\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          }\n        ];\n      };\n    }\n  ];\n  types: [\n    {\n      name: \"AmountWithSlippage\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n          {\n            name: \"slippageBps\";\n            type: \"u16\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RoutePlanStep\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"swap\";\n            type: {\n              defined: \"Swap\";\n            };\n          },\n          {\n            name: \"percent\";\n            type: \"u8\";\n          },\n          {\n            name: \"inputIndex\";\n            type: \"u8\";\n          },\n          {\n            name: \"outputIndex\";\n            type: \"u8\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"PlatformFeeType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"SourceMint\";\n            fields: [\n              {\n                name: \"mint\";\n                type: \"publicKey\";\n              }\n            ];\n          },\n          {\n            name: \"DestinationMint\";\n            fields: [\n              {\n                name: \"mint\";\n                type: \"publicKey\";\n              }\n            ];\n          },\n          {\n            name: \"Zero\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"Side\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Bid\";\n          },\n          {\n            name: \"Ask\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"Swap\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Saber\";\n          },\n          {\n            name: \"SaberAddDecimalsDeposit\";\n          },\n          {\n            name: \"SaberAddDecimalsWithdraw\";\n          },\n          {\n            name: \"TokenSwap\";\n          },\n          {\n            name: \"Sencha\";\n          },\n          {\n            name: \"Step\";\n          },\n          {\n            name: \"Cropper\";\n          },\n          {\n            name: \"Raydium\";\n          },\n          {\n            name: \"Crema\";\n            fields: [\n              {\n                name: \"aToB\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"Lifinity\";\n          },\n          {\n            name: \"Mercurial\";\n          },\n          {\n            name: \"Cykura\";\n          },\n          {\n            name: \"Serum\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"MarinadeDeposit\";\n          },\n          {\n            name: \"MarinadeUnstake\";\n          },\n          {\n            name: \"Aldrin\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"AldrinV2\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"Whirlpool\";\n            fields: [\n              {\n                name: \"aToB\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"Invariant\";\n            fields: [\n              {\n                name: \"xToY\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"Meteora\";\n          },\n          {\n            name: \"GooseFX\";\n          },\n          {\n            name: \"DeltaFi\";\n            fields: [\n              {\n                name: \"stable\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"Balansol\";\n          },\n          {\n            name: \"MarcoPolo\";\n            fields: [\n              {\n                name: \"xToY\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"Dradex\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"LifinityV2\";\n          },\n          {\n            name: \"RaydiumClmm\";\n          },\n          {\n            name: \"Openbook\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"Phoenix\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"Symmetry\";\n            fields: [\n              {\n                name: \"fromTokenId\";\n                type: \"u64\";\n              },\n              {\n                name: \"toTokenId\";\n                type: \"u64\";\n              }\n            ];\n          },\n          {\n            name: \"TokenSwapV2\";\n          },\n          {\n            name: \"HeliumTreasuryManagementRedeemV0\";\n          },\n          {\n            name: \"StakeDexStakeWrappedSol\";\n          },\n          {\n            name: \"StakeDexSwapViaStake\";\n            fields: [\n              {\n                name: \"bridgeStakeSeed\";\n                type: \"u32\";\n              }\n            ];\n          },\n          {\n            name: \"GooseFXV2\";\n          },\n          {\n            name: \"Perps\";\n          },\n          {\n            name: \"PerpsAddLiquidity\";\n          },\n          {\n            name: \"PerpsRemoveLiquidity\";\n          },\n          {\n            name: \"MeteoraDlmm\";\n          },\n          {\n            name: \"OpenBookV2\";\n            fields: [\n              {\n                name: \"side\";\n                type: {\n                  defined: \"Side\";\n                };\n              }\n            ];\n          },\n          {\n            name: \"RaydiumClmmV2\";\n          },\n          {\n            name: \"StakeDexPrefundWithdrawStakeAndDepositStake\";\n            fields: [\n              {\n                name: \"bridgeStakeSeed\";\n                type: \"u32\";\n              }\n            ];\n          },\n          {\n            name: \"Clone\";\n            fields: [\n              {\n                name: \"poolIndex\";\n                type: \"u8\";\n              },\n              {\n                name: \"quantityIsInput\";\n                type: \"bool\";\n              },\n              {\n                name: \"quantityIsCollateral\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"SanctumS\";\n            fields: [\n              {\n                name: \"srcLstValueCalcAccs\";\n                type: \"u8\";\n              },\n              {\n                name: \"dstLstValueCalcAccs\";\n                type: \"u8\";\n              },\n              {\n                name: \"srcLstIndex\";\n                type: \"u32\";\n              },\n              {\n                name: \"dstLstIndex\";\n                type: \"u32\";\n              }\n            ];\n          },\n          {\n            name: \"SanctumSAddLiquidity\";\n            fields: [\n              {\n                name: \"lstValueCalcAccs\";\n                type: \"u8\";\n              },\n              {\n                name: \"lstIndex\";\n                type: \"u32\";\n              }\n            ];\n          },\n          {\n            name: \"SanctumSRemoveLiquidity\";\n            fields: [\n              {\n                name: \"lstValueCalcAccs\";\n                type: \"u8\";\n              },\n              {\n                name: \"lstIndex\";\n                type: \"u32\";\n              }\n            ];\n          },\n          {\n            name: \"RaydiumCP\";\n          },\n          {\n            name: \"WhirlpoolSwapV2\";\n            fields: [\n              {\n                name: \"aToB\";\n                type: \"bool\";\n              },\n              {\n                name: \"remainingAccountsInfo\";\n                type: {\n                  option: {\n                    defined: \"RemainingAccountsInfo\";\n                  };\n                };\n              }\n            ];\n          },\n          {\n            name: \"OneIntro\";\n          },\n          {\n            name: \"PumpdotfunWrappedBuy\";\n          },\n          {\n            name: \"PumpdotfunWrappedSell\";\n          },\n          {\n            name: \"PerpsV2\";\n          },\n          {\n            name: \"PerpsV2AddLiquidity\";\n          },\n          {\n            name: \"PerpsV2RemoveLiquidity\";\n          },\n          {\n            name: \"MoonshotWrappedBuy\";\n          },\n          {\n            name: \"MoonshotWrappedSell\";\n          },\n          {\n            name: \"StabbleStableSwap\";\n          },\n          {\n            name: \"StabbleWeightedSwap\";\n          },\n          {\n            name: \"Obric\";\n            fields: [\n              {\n                name: \"xToY\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"FoxBuyFromEstimatedCost\";\n          },\n          {\n            name: \"FoxClaimPartial\";\n            fields: [\n              {\n                name: \"isY\";\n                type: \"bool\";\n              }\n            ];\n          },\n          {\n            name: \"SolFi\";\n            fields: [\n              {\n                name: \"isQuoteToBase\";\n                type: \"bool\";\n              }\n            ];\n          }\n        ];\n      };\n    },\n    {\n      name: \"RemainingAccountsSlice\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"accountsType\";\n            type: {\n              defined: \"AccountsType\";\n            };\n          },\n          {\n            name: \"length\";\n            type: \"u8\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RemainingAccountsInfo\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"slices\";\n            type: {\n              vec: {\n                defined: \"RemainingAccountsSlice\";\n              };\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"AccountsType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"TransferHookA\";\n          },\n          {\n            name: \"TransferHookB\";\n          }\n        ];\n      };\n    }\n  ];\n  events: [\n    {\n      name: \"SwapEvent\";\n      fields: [\n        {\n          name: \"amm\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"inputMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"inputAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"outputMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"outputAmount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"FeeEvent\";\n      fields: [\n        {\n          name: \"account\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    }\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"EmptyRoute\";\n      msg: \"Empty route\";\n    },\n    {\n      code: 6001;\n      name: \"SlippageToleranceExceeded\";\n      msg: \"Slippage tolerance exceeded\";\n    },\n    {\n      code: 6002;\n      name: \"InvalidCalculation\";\n      msg: \"Invalid calculation\";\n    },\n    {\n      code: 6003;\n      name: \"MissingPlatformFeeAccount\";\n      msg: \"Missing platform fee account\";\n    },\n    {\n      code: 6004;\n      name: \"InvalidSlippage\";\n      msg: \"Invalid slippage\";\n    },\n    {\n      code: 6005;\n      name: \"NotEnoughPercent\";\n      msg: \"Not enough percent to 100\";\n    },\n    {\n      code: 6006;\n      name: \"InvalidInputIndex\";\n      msg: \"Token input index is invalid\";\n    },\n    {\n      code: 6007;\n      name: \"InvalidOutputIndex\";\n      msg: \"Token output index is invalid\";\n    },\n    {\n      code: 6008;\n      name: \"NotEnoughAccountKeys\";\n      msg: \"Not Enough Account keys\";\n    },\n    {\n      code: 6009;\n      name: \"NonZeroMinimumOutAmountNotSupported\";\n      msg: \"Non zero minimum out amount not supported\";\n    },\n    {\n      code: 6010;\n      name: \"InvalidRoutePlan\";\n      msg: \"Invalid route plan\";\n    },\n    {\n      code: 6011;\n      name: \"InvalidReferralAuthority\";\n      msg: \"Invalid referral authority\";\n    },\n    {\n      code: 6012;\n      name: \"LedgerTokenAccountDoesNotMatch\";\n      msg: \"Token account doesn't match the ledger\";\n    },\n    {\n      code: 6013;\n      name: \"InvalidTokenLedger\";\n      msg: \"Invalid token ledger\";\n    },\n    {\n      code: 6014;\n      name: \"IncorrectTokenProgramID\";\n      msg: \"Token program ID is invalid\";\n    },\n    {\n      code: 6015;\n      name: \"TokenProgramNotProvided\";\n      msg: \"Token program not provided\";\n    },\n    {\n      code: 6016;\n      name: \"SwapNotSupported\";\n      msg: \"Swap not supported\";\n    },\n    {\n      code: 6017;\n      name: \"ExactOutAmountNotMatched\";\n      msg: \"Exact out amount doesn't match\";\n    },\n    {\n      code: 6018;\n      name: \"SourceAndDestinationMintCannotBeTheSame\";\n      msg: \"Source mint and destination mint cannot the same\";\n    }\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: \"0.1.0\",\n  name: \"jupiter\",\n  instructions: [\n    {\n      name: \"route\",\n      docs: [\"route_plan Topologically sorted trade DAG\"],\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"userSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n      ],\n      args: [\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"inAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"quotedOutAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"routeWithTokenLedger\",\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"userSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"tokenLedger\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"quotedOutAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"sharedAccountsRoute\",\n      docs: [\n        \"Route by using program owned token accounts and open orders accounts.\",\n      ],\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"sourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sourceMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"token2022Program\",\n          isMut: false,\n          isSigner: false,\n          isOptional: true,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"inAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"quotedOutAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"sharedAccountsRouteWithTokenLedger\",\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"sourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sourceMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"token2022Program\",\n          isMut: false,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"tokenLedger\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"quotedOutAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"exactOutRoute\",\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"userSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"sourceMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"token2022Program\",\n          isMut: false,\n          isSigner: false,\n          isOptional: true,\n        },\n      ],\n      args: [\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"outAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"quotedInAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"sharedAccountsExactOutRoute\",\n      docs: [\n        \"Route by using program owned token accounts and open orders accounts.\",\n      ],\n      accounts: [\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userTransferAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"sourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programSourceTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programDestinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sourceMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"destinationMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"platformFeeAccount\",\n          isMut: true,\n          isSigner: false,\n          isOptional: true,\n        },\n        {\n          name: \"token2022Program\",\n          isMut: false,\n          isSigner: false,\n          isOptional: true,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n        {\n          name: \"routePlan\",\n          type: {\n            vec: {\n              defined: \"RoutePlanStep\",\n            },\n          },\n        },\n        {\n          name: \"outAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"quotedInAmount\",\n          type: \"u64\",\n        },\n        {\n          name: \"slippageBps\",\n          type: \"u16\",\n        },\n        {\n          name: \"platformFeeBps\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"setTokenLedger\",\n      accounts: [\n        {\n          name: \"tokenLedger\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"createOpenOrders\",\n      accounts: [\n        {\n          name: \"openOrders\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"dexProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"market\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"createTokenAccount\",\n      accounts: [\n        {\n          name: \"tokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"bump\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"createProgramOpenOrders\",\n      accounts: [\n        {\n          name: \"openOrders\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"dexProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"market\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"claim\",\n      accounts: [\n        {\n          name: \"wallet\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"claimToken\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"wallet\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"programAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"programTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"id\",\n          type: \"u8\",\n        },\n      ],\n      returns: \"u64\",\n    },\n    {\n      name: \"createTokenLedger\",\n      accounts: [\n        {\n          name: \"tokenLedger\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"TokenLedger\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"tokenAccount\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"AmountWithSlippage\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n          {\n            name: \"slippageBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RoutePlanStep\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"swap\",\n            type: {\n              defined: \"Swap\",\n            },\n          },\n          {\n            name: \"percent\",\n            type: \"u8\",\n          },\n          {\n            name: \"inputIndex\",\n            type: \"u8\",\n          },\n          {\n            name: \"outputIndex\",\n            type: \"u8\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"PlatformFeeType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"SourceMint\",\n            fields: [\n              {\n                name: \"mint\",\n                type: \"publicKey\",\n              },\n            ],\n          },\n          {\n            name: \"DestinationMint\",\n            fields: [\n              {\n                name: \"mint\",\n                type: \"publicKey\",\n              },\n            ],\n          },\n          {\n            name: \"Zero\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Side\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Bid\",\n          },\n          {\n            name: \"Ask\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Swap\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Saber\",\n          },\n          {\n            name: \"SaberAddDecimalsDeposit\",\n          },\n          {\n            name: \"SaberAddDecimalsWithdraw\",\n          },\n          {\n            name: \"TokenSwap\",\n          },\n          {\n            name: \"Sencha\",\n          },\n          {\n            name: \"Step\",\n          },\n          {\n            name: \"Cropper\",\n          },\n          {\n            name: \"Raydium\",\n          },\n          {\n            name: \"Crema\",\n            fields: [\n              {\n                name: \"aToB\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"Lifinity\",\n          },\n          {\n            name: \"Mercurial\",\n          },\n          {\n            name: \"Cykura\",\n          },\n          {\n            name: \"Serum\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"MarinadeDeposit\",\n          },\n          {\n            name: \"MarinadeUnstake\",\n          },\n          {\n            name: \"Aldrin\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"AldrinV2\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"Whirlpool\",\n            fields: [\n              {\n                name: \"aToB\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"Invariant\",\n            fields: [\n              {\n                name: \"xToY\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"Meteora\",\n          },\n          {\n            name: \"GooseFX\",\n          },\n          {\n            name: \"DeltaFi\",\n            fields: [\n              {\n                name: \"stable\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"Balansol\",\n          },\n          {\n            name: \"MarcoPolo\",\n            fields: [\n              {\n                name: \"xToY\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"Dradex\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"LifinityV2\",\n          },\n          {\n            name: \"RaydiumClmm\",\n          },\n          {\n            name: \"Openbook\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"Phoenix\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"Symmetry\",\n            fields: [\n              {\n                name: \"fromTokenId\",\n                type: \"u64\",\n              },\n              {\n                name: \"toTokenId\",\n                type: \"u64\",\n              },\n            ],\n          },\n          {\n            name: \"TokenSwapV2\",\n          },\n          {\n            name: \"HeliumTreasuryManagementRedeemV0\",\n          },\n          {\n            name: \"StakeDexStakeWrappedSol\",\n          },\n          {\n            name: \"StakeDexSwapViaStake\",\n            fields: [\n              {\n                name: \"bridgeStakeSeed\",\n                type: \"u32\",\n              },\n            ],\n          },\n          {\n            name: \"GooseFXV2\",\n          },\n          {\n            name: \"Perps\",\n          },\n          {\n            name: \"PerpsAddLiquidity\",\n          },\n          {\n            name: \"PerpsRemoveLiquidity\",\n          },\n          {\n            name: \"MeteoraDlmm\",\n          },\n          {\n            name: \"OpenBookV2\",\n            fields: [\n              {\n                name: \"side\",\n                type: {\n                  defined: \"Side\",\n                },\n              },\n            ],\n          },\n          {\n            name: \"RaydiumClmmV2\",\n          },\n          {\n            name: \"StakeDexPrefundWithdrawStakeAndDepositStake\",\n            fields: [\n              {\n                name: \"bridgeStakeSeed\",\n                type: \"u32\",\n              },\n            ],\n          },\n          {\n            name: \"Clone\",\n            fields: [\n              {\n                name: \"poolIndex\",\n                type: \"u8\",\n              },\n              {\n                name: \"quantityIsInput\",\n                type: \"bool\",\n              },\n              {\n                name: \"quantityIsCollateral\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"SanctumS\",\n            fields: [\n              {\n                name: \"srcLstValueCalcAccs\",\n                type: \"u8\",\n              },\n              {\n                name: \"dstLstValueCalcAccs\",\n                type: \"u8\",\n              },\n              {\n                name: \"srcLstIndex\",\n                type: \"u32\",\n              },\n              {\n                name: \"dstLstIndex\",\n                type: \"u32\",\n              },\n            ],\n          },\n          {\n            name: \"SanctumSAddLiquidity\",\n            fields: [\n              {\n                name: \"lstValueCalcAccs\",\n                type: \"u8\",\n              },\n              {\n                name: \"lstIndex\",\n                type: \"u32\",\n              },\n            ],\n          },\n          {\n            name: \"SanctumSRemoveLiquidity\",\n            fields: [\n              {\n                name: \"lstValueCalcAccs\",\n                type: \"u8\",\n              },\n              {\n                name: \"lstIndex\",\n                type: \"u32\",\n              },\n            ],\n          },\n          {\n            name: \"RaydiumCP\",\n          },\n          {\n            name: \"WhirlpoolSwapV2\",\n            fields: [\n              {\n                name: \"aToB\",\n                type: \"bool\",\n              },\n              {\n                name: \"remainingAccountsInfo\",\n                type: {\n                  option: {\n                    defined: \"RemainingAccountsInfo\",\n                  },\n                },\n              },\n            ],\n          },\n          {\n            name: \"OneIntro\",\n          },\n          {\n            name: \"PumpdotfunWrappedBuy\",\n          },\n          {\n            name: \"PumpdotfunWrappedSell\",\n          },\n          {\n            name: \"PerpsV2\",\n          },\n          {\n            name: \"PerpsV2AddLiquidity\",\n          },\n          {\n            name: \"PerpsV2RemoveLiquidity\",\n          },\n          {\n            name: \"MoonshotWrappedBuy\",\n          },\n          {\n            name: \"MoonshotWrappedSell\",\n          },\n          {\n            name: \"StabbleStableSwap\",\n          },\n          {\n            name: \"StabbleWeightedSwap\",\n          },\n          {\n            name: \"Obric\",\n            fields: [\n              {\n                name: \"xToY\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"FoxBuyFromEstimatedCost\",\n          },\n          {\n            name: \"FoxClaimPartial\",\n            fields: [\n              {\n                name: \"isY\",\n                type: \"bool\",\n              },\n            ],\n          },\n          {\n            name: \"SolFi\",\n            fields: [\n              {\n                name: \"isQuoteToBase\",\n                type: \"bool\",\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: \"RemainingAccountsSlice\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"accountsType\",\n            type: {\n              defined: \"AccountsType\",\n            },\n          },\n          {\n            name: \"length\",\n            type: \"u8\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RemainingAccountsInfo\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"slices\",\n            type: {\n              vec: {\n                defined: \"RemainingAccountsSlice\",\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"AccountsType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"TransferHookA\",\n          },\n          {\n            name: \"TransferHookB\",\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: \"SwapEvent\",\n      fields: [\n        {\n          name: \"amm\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"inputMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"inputAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"outputMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"outputAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"FeeEvent\",\n      fields: [\n        {\n          name: \"account\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"EmptyRoute\",\n      msg: \"Empty route\",\n    },\n    {\n      code: 6001,\n      name: \"SlippageToleranceExceeded\",\n      msg: \"Slippage tolerance exceeded\",\n    },\n    {\n      code: 6002,\n      name: \"InvalidCalculation\",\n      msg: \"Invalid calculation\",\n    },\n    {\n      code: 6003,\n      name: \"MissingPlatformFeeAccount\",\n      msg: \"Missing platform fee account\",\n    },\n    {\n      code: 6004,\n      name: \"InvalidSlippage\",\n      msg: \"Invalid slippage\",\n    },\n    {\n      code: 6005,\n      name: \"NotEnoughPercent\",\n      msg: \"Not enough percent to 100\",\n    },\n    {\n      code: 6006,\n      name: \"InvalidInputIndex\",\n      msg: \"Token input index is invalid\",\n    },\n    {\n      code: 6007,\n      name: \"InvalidOutputIndex\",\n      msg: \"Token output index is invalid\",\n    },\n    {\n      code: 6008,\n      name: \"NotEnoughAccountKeys\",\n      msg: \"Not Enough Account keys\",\n    },\n    {\n      code: 6009,\n      name: \"NonZeroMinimumOutAmountNotSupported\",\n      msg: \"Non zero minimum out amount not supported\",\n    },\n    {\n      code: 6010,\n      name: \"InvalidRoutePlan\",\n      msg: \"Invalid route plan\",\n    },\n    {\n      code: 6011,\n      name: \"InvalidReferralAuthority\",\n      msg: \"Invalid referral authority\",\n    },\n    {\n      code: 6012,\n      name: \"LedgerTokenAccountDoesNotMatch\",\n      msg: \"Token account doesn't match the ledger\",\n    },\n    {\n      code: 6013,\n      name: \"InvalidTokenLedger\",\n      msg: \"Invalid token ledger\",\n    },\n    {\n      code: 6014,\n      name: \"IncorrectTokenProgramID\",\n      msg: \"Token program ID is invalid\",\n    },\n    {\n      code: 6015,\n      name: \"TokenProgramNotProvided\",\n      msg: \"Token program not provided\",\n    },\n    {\n      code: 6016,\n      name: \"SwapNotSupported\",\n      msg: \"Swap not supported\",\n    },\n    {\n      code: 6017,\n      name: \"ExactOutAmountNotMatched\",\n      msg: \"Exact out amount doesn't match\",\n    },\n    {\n      code: 6018,\n      name: \"SourceAndDestinationMintCannotBeTheSame\",\n      msg: \"Source mint and destination mint cannot the same\",\n    },\n  ],\n};\n","import Decimal from \"decimal.js\";\nimport ky from \"ky\";\nimport { BN } from \"@coral-xyz/anchor\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\n// Caches for Price API\nconst jupiterPrices: Map<string, any> = new Map();\nconst jupiterTTL: Map<string, number> = new Map();\n\n// Use the Jupiter Pricing API to get the price of a token in USD.\nexport async function getPriceInUSDByMint(\n  tokenMint: string\n): Promise<Decimal | undefined> {\n  try {\n    let price = jupiterPrices.get(tokenMint);\n    let ttl = jupiterTTL.get(tokenMint);\n\n    // Cache for 60 seconds\n    if (price && ttl && new Date().getTime() - ttl < 60 * 1000) {\n      return new Decimal(price);\n    }\n\n    let payload = (await ky\n      .get(`https://price.jup.ag/v4/price?ids=${tokenMint}`)\n      .json()) as any;\n\n    if (payload.data[tokenMint]) {\n      let price = payload.data[tokenMint].price;\n\n      jupiterPrices.set(tokenMint, price);\n      jupiterTTL.set(tokenMint, new Date().getTime());\n\n      return new Decimal(price);\n    }\n  } catch (e) {\n    console.log(`coin not found: ${tokenMint}`);\n    return;\n  }\n\n  return;\n}\n\nexport class DecimalUtil {\n  public static fromBigInt(input: BigInt, shift = 0): Decimal {\n    return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n  }\n\n  public static fromBN(input: BN, shift = 0): Decimal {\n    return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n  }\n}\n\n// Fetch the Jupiter token list and return a token map (mint address -> token info)\nexport async function getTokenMap(): Promise<Record<string, TokenInfo>> {\n  const response = await ky.get('https://token.jup.ag/all').json();\n  // The response is an array of token info objects\n  const tokens = response as TokenInfo[];\n  const tokenMap: Record<string, TokenInfo> = {};\n  for (const token of tokens) {\n    tokenMap[token.address] = token;\n  }\n  return tokenMap;\n}\n","import { Event, Program, utils } from \"@coral-xyz/anchor\";\nimport { JUPITER_V6_PROGRAM_ID } from \"../constants\";\nimport { TransactionWithMeta } from \"../types\";\n\nexport function getEvents(\n  program: Program,\n  transactionResponse: TransactionWithMeta\n) {\n  let events: Event[] = [];\n\n  if (transactionResponse && transactionResponse.meta) {\n    let { meta } = transactionResponse;\n\n    meta.innerInstructions?.map(async (ix) => {\n      ix.instructions.map(async (iix) => {\n        if (!iix.programId.equals(JUPITER_V6_PROGRAM_ID)) return;\n        if (!(\"data\" in iix)) return; // Guard in case it is a parsed decoded instruction\n\n        const ixData = utils.bytes.bs58.decode(iix.data);\n        const eventData = utils.bytes.base64.encode(ixData.subarray(8));\n        const event = program.coder.events.decode(eventData);\n\n        if (!event) return;\n\n        events.push(event);\n      });\n    });\n  }\n\n  return events;\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const JUPITER_V6_PROGRAM_ID = new PublicKey(\n  \"JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4\"\n);\n\nexport const AMM_TYPES = {\n  DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1: \"Orca v1\",\n  \"9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP\": \"Orca\",\n  MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky: \"Mercurial\",\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\": \"Serum\",\n  \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\": \"Raydium\",\n  SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ: \"Saber\",\n  PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP: \"Penguin\",\n  AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6: \"Aldrin\",\n  CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4: \"Aldrin v2\",\n  SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1: \"Step\",\n  CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh: \"Cropper\",\n  SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ: \"Sencha\",\n  CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR: \"Crema\",\n  EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S: \"Lifinity\",\n  SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr: \"Saros\",\n  whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc: \"Whirlpool\",\n  cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8: \"Cykura\",\n  MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD: \"Marinade\",\n  Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j: \"Stepn\",\n  Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB: \"Meteora\",\n  HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt: \"Invariant\",\n  \"7WduLbRfYhTJktjLw5FDEyrqoEv61aTTCuGAetgLjzN5\": \"GooseFX\",\n  DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB: \"Saber Decimal Wrapper\",\n  D3BBjqUdCYuP18fNvvMbPAZ8DpcRi4io2EsYHQawJDag: \"Balansol\",\n  dp2waEWSBy5yKmq65ergoU3G6qRLmqa6K7We4rZSKph: \"Dradex\",\n  \"2wT8Yq49kHgDzXuPxZSaeLaH1qbmGXtEyPy64bL7aD3c\": \"Lifinity v2\",\n  CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK: \"Raydium CLMM\",\n  srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX: \"Openbook\",\n  \"9tKE7Mbmj4mxDjWatikzGAtkoWosiiZX9y6J4Hfm2R8H\": \"Marco Polo\",\n  PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY: \"Phoenix\",\n  \"2KehYt3KsEQR53jYcxjbQp2d2kCp4AkuQW68atufRwSr\": \"Symmetry\",\n  BSwp6bEBihVLdqJRKGgzjcGLHkcTuzmSo1TQkHepzH8p: \"BonkSwap\",\n  FLUXubRmkEi2q6K3Y9kBPg9248ggaZVsoSFhtJHSrm1X: \"FluxBeam\",\n  treaf4wWBBty3fHdyBpo35Mz84M8k3heKXmjmi9vFt5: \"Helium Network\",\n  stkitrT1Uoy18Dk1fTrgPw8W6MVzoCfYoAFT4MLsmhq: \"unstake.it\",\n  GFXsSL5sSaDfNFQUYsHekbWBW1TsFdjDYzACh62tEHxn: \"GooseFX v2\",\n  PERPHjGBqRHArX4DySjwM6UJHiR3sWAatqfdBS2qQJu: \"Perps\",\n  LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo: \"Meteora DLMM\",\n  SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8: \"Token Swap\",\n  opnb2LAfJYbRMAHHvqjCwQxanZn7ReEHp1k81EohpZb: \"Openbook v2\",\n  DSwpgjMvXhtGn6BsbqmacdBZyfLj6jSWf3HJpdJtmg6N: \"Dexlab\",\n  C1onEW2kPetmHmwe74YC1ESx3LnFEpVau6g2pg4fHycr: \"Clone\",\n  CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C: \"Raydium CP\",\n  H8W3ctz92svYg6mkn1UtGfu2aQr2fnUFHM1RhScEtQDt: \"Cropper Whirlpool\",\n  \"5ocnV1qiCgaQR8Jb8xWnVbApfaygJ8tNoZfgPwsgx9kx\": \"Sanctum S\",\n  Gswppe6ERWKpUTXvRPfXdzHhiCyJvLadVvXGfdpBqcE1: \"GuacSwap\",\n  DEXYosS6oEGvk8uCDayvwEZz4qEyDJRf9nFgYCaqPMTm: \"1DEX\",\n  \"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P\": \"Pump.Fun\",\n  obriQD1zbpyLz95G5n7nJe6a4DPjpFwa5XYPoNm113y: \"Obric\",\n  SoLFiHG9TfgtdUXUjWAxi3LtvYuFyDLVhBWxdMZxyCe: \"SolFi\",\n  HyhpEq587ANShDdbx1mP4dTmDZC44CXWft29oYQXDb53: \"Fox\",\n};\n"],"mappings":"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","names":["Program","Decimal","price","program","Program","swap","_a","Decimal"]}